name: Deploy to AWS EC2

on:
  push:
    branches: [main]
  workflow_run:
    workflows: ['CI']
    types: [completed]
    branches: [main]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Check code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          command_timeout: 10m
          envs: N8N_PASSWORD,DOCKER_USERNAME
          script: |
            echo "üöÄ Starting deployment..."
            
            # Verificar directorio de trabajo
            if [ ! -d "/app" ]; then
              echo "‚ùå /app directory missing, creating..."
              sudo mkdir -p /app
              sudo chown ubuntu:ubuntu /app
            fi
            
            cd /app || exit 1
            
            # Verificar git repository
            if [ ! -d ".git" ]; then
              echo "‚ùå Git repo missing, cloning..."
              git clone git@github.com:CristianMacha/ci-cd-backend.git .
            fi

            echo "üì• Pulling latest code..."
            git pull origin main || exit 1
            
            # Verificar archivos cr√≠ticos
            if [ ! -f "docker-compose.yml" ]; then
              echo "‚ùå docker-compose.yml missing!"
              exit 1
            fi
            
            if [ ! -f "Dockerfile" ]; then
              echo "‚ùå Dockerfile missing!"
              exit 1
            fi

            echo "üî® Deploying with Docker Hub image..."
            
            # Pull latest image from Docker Hub (built in CI)
            echo "üì• Pulling latest image from Docker Hub..."
            export N8N_PASSWORD=$N8N_PASSWORD
            export DOCKER_USERNAME=$DOCKER_USERNAME
            docker pull $DOCKER_USERNAME/nestjs-backend:latest
            
            echo "üîÑ Ultra-fast container swap..."
            # Pre-crear contenedor con nuevo nombre
            docker run -d --name nestjs-app-new \
              --network app_app-network \
              -p 3001:3000 \
              -e NODE_ENV=production \
              -e PORT=3000 \
              $DOCKER_USERNAME/nestjs-backend:latest
            
            # Esperar a que el nuevo est√© listo
            sleep 3
            if ! curl -f http://localhost:3001/health; then
              echo "‚ùå New container failed to start"
              docker logs nestjs-app-new --tail 10
              docker rm -f nestjs-app-new
              exit 1
            fi
            
            echo "‚úÖ New container ready, performing instant swap..."
            # Swap instant√°neo: remover viejo y renombrar nuevo
            docker stop nestjs-app || true
            docker rm nestjs-app || true
            docker stop nestjs-app-new
            docker rm nestjs-app-new
            
            # Crear el contenedor final en el puerto correcto
            docker run -d --name nestjs-app \
              --network app_app-network \
              -p 3000:3000 \
              -e NODE_ENV=production \
              -e PORT=3000 \
              --restart unless-stopped \
              $DOCKER_USERNAME/nestjs-backend:latest
            
            # Backend deployment only - n8n and nginx are stable services
            echo "‚ÑπÔ∏è n8n and nginx are managed as stable services, only deploying backend"

            echo "‚úÖ Quick health check..."
            
            # Verificaci√≥n ultra-r√°pida
            sleep 1
            if curl -s http://localhost:3000/health > /dev/null; then
              echo "‚úÖ App healthy"
            else
              echo "‚ö†Ô∏è App starting, waiting 2s..."
              sleep 2
              if curl -s http://localhost:3000/health > /dev/null; then
                echo "‚úÖ App healthy after restart"
              else
                echo "‚ùå App failed to start"
                docker logs nestjs-app --tail 20
                exit 1
              fi
            fi

            echo "üéâ Deployment completed successfully!"
        env:
          N8N_PASSWORD: ${{ secrets.N8N_PASSWORD }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
